from datetime import datetime
from typing import List, Dict, Set, Optional
from pydantic import BaseModel, Field

class Vulnerability(BaseModel):
    """
    Base model for vulnerability data from a single source.
    """
    id: str  # Unique identifier for this vulnerability record
    cve_id: Optional[str] = None  # CVE ID if available
    source_id: str  # ID from the source system
    title: str
    description: str
    date: str
    source: str
    source_type: str = "base"  # "base" or "volatile"
    url: str
    base_score: Optional[str] = None
    base_severity: Optional[str] = None
    reference_urls: Set[str] = Field(default_factory=set)
    vulnerable_components: Set[str] = Field(default_factory=set)
    tags: Set[str] = Field(default_factory=set)
    weaknesses: Set[str] = Field(default_factory=set)
    patched_versions: Optional[str] = None

class VulnerabilityIntelligence(BaseModel):
    """
    A model that aggregates information about a vulnerability from multiple sources.
    """
    
    id: str  # Unique identifier for this intelligence record
    cve_ids: Set[str] = Field(default_factory=set)  # Set of CVE IDs from all sources
    source_ids: Set[str] = Field(default_factory=set)  # Set of source IDs from all sources
    titles: List[Dict[str, str]] = Field(default_factory=list)
    descriptions: List[Dict[str, str]] = Field(default_factory=list)
    urls: List[Dict[str, str]] = Field(default_factory=list)
    reference_urls: Set[str] = Field(default_factory=set)
    base_scores: List[Dict[str, str]] = Field(default_factory=list)
    severities: List[Dict[str, str]] = Field(default_factory=list)
    vulnerable_components: Set[str] = Field(default_factory=set)
    tags: Set[str] = Field(default_factory=set)
    dates: List[Dict[str, str]] = Field(default_factory=list)
    weaknesses: Set[str] = Field(default_factory=set)
    patched_versions: Set[str] = Field(default_factory=set)
    first_seen: datetime = Field(default_factory=datetime.now)
    last_updated: datetime = Field(default_factory=datetime.now)
    sources: Set[str] = Field(default_factory=set)
    base_sources: Set[str] = Field(default_factory=set)
    volatile_sources: Set[str] = Field(default_factory=set)

    def add_vulnerability(self, vulnerability: Vulnerability):
        """
        Add a vulnerability to this intelligence record, enriching it with the new data.
        """
        self.titles.append({
            "source": vulnerability.source, 
            "text": vulnerability.title, 
            "date": vulnerability.date
        })
        
        self.urls.append({
            "source": vulnerability.source, 
            "url": vulnerability.url, 
            "date": vulnerability.date
        })
        
        self.descriptions.append({
            "source": vulnerability.source, 
            "text": vulnerability.description, 
            "date": vulnerability.date
        })
        
        self.reference_urls.update(vulnerability.reference_urls)
        
        if vulnerability.base_score:
            self.base_scores.append({
                "source": vulnerability.source, 
                "score": vulnerability.base_score, 
                "date": vulnerability.date
            })
        
        if vulnerability.base_severity:
            self.severities.append({
                "source": vulnerability.source, 
                "severity": vulnerability.base_severity, 
                "date": vulnerability.date
            })
        
        self.vulnerable_components.update(vulnerability.vulnerable_components)
        self.tags.update(vulnerability.tags)
        
        self.dates.append({
            "source": vulnerability.source, 
            "date": vulnerability.date
        })
        
        self.weaknesses.update(vulnerability.weaknesses)
        
        if vulnerability.patched_versions:
            self.patched_versions.add(vulnerability.patched_versions)
            
        self.sources.add(vulnerability.source)
        
        # Add CVE ID if available
        if vulnerability.cve_id:
            self.cve_ids.add(vulnerability.cve_id)
            
        # Add source ID
        self.source_ids.add(vulnerability.source_id)
            
        # Update base_sources or volatile_sources based on the vulnerability source type
        if vulnerability.source_type == "base":
            self.base_sources.add(vulnerability.source)
        else:
            self.volatile_sources.add(vulnerability.source)
            
        self.last_updated = datetime.now()
        
    def to_dict(self):
        """Convert the model to a dictionary."""
        return {
            "id": self.id,
            "cve_ids": list(self.cve_ids),
            "source_ids": list(self.source_ids),
            "titles": list(self.titles),
            "descriptions": list(self.descriptions),
            "urls": list(self.urls),
            "reference_urls": list(self.reference_urls),
            "base_scores": list(self.base_scores),
            "severities": list(self.severities),
            "vulnerable_components": list(self.vulnerable_components),
            "tags": list(self.tags),
            "dates": list(self.dates),
            "weaknesses": list(self.weaknesses),
            "patched_versions": list(self.patched_versions),
            "first_seen": self.first_seen.isoformat(),
            "last_updated": self.last_updated.isoformat(),
            "sources": list(self.sources),
            "base_sources": list(self.base_sources),
            "volatile_sources": list(self.volatile_sources)
        } 